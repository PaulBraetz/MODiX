@using AspNet.Security.OAuth.Discord;
@using Discord.WebSocket;
@using Modix.Data.Models.Core;
@using Modix.Web.Models;
@using Modix.Web.Services;
@using MudBlazor;
@using System.Security.Claims;

<CascadingAuthenticationState>

    <div class="d-flex d-lg-none">
        <MudAppBar Elevation="0" Fixed="false" Color="Color.Primary">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
            <AuthorizeView>
                <MudSpacer />
                <MiniUser />
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer Color="Color.Primary" @bind-Open="_drawerVisible" Elevation="1" Anchor="Anchor.Top" DisableOverlay="false" ClipMode="DrawerClipMode.Never" Variant="DrawerVariant.Temporary" Fixed="false">
            <MudNavMenu Color="Color.Surface" Bordered="true">
                <NavMenuLinks />
            </MudNavMenu>
        </MudDrawer>
    </div>

    <div class="d-none d-lg-flex">
        <MudAppBar Elevation="0" Dense="true" Fixed="false" DisableGutters="true" Color="Color.Primary">
            <NavMenuLinks />

            <AuthorizeView>
                <MudSpacer />

                @* The color: inherit here is needed to keep the colors consistent between link icons and light/dark theme icons
                    I would suggest not thinking about it too much :) *@
                <MudToggleIconButton Class="mr-2" Style="color: inherit"
                    Size="Size.Small"
                    ToggledSize="Size.Small"
                    Toggled="DarkMode"
                    ToggledChanged="ToggleDarkMode"
                    ToggledIcon="@Icons.Material.Filled.LightMode"
                    Icon="@Icons.Material.Filled.DarkMode"
                    Color="Color.Surface"/>

                <MiniUser />
            </AuthorizeView>
        </MudAppBar>
    </div>
</CascadingAuthenticationState>

@code {
    [Inject]
    public required CookieService CookieService { get; set; }

    [Parameter]
    public bool DarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> DarkModeChanged { get; set; }

    private bool _drawerVisible;

    private void ToggleDrawer() => _drawerVisible = !_drawerVisible;

    private async Task ToggleDarkMode(bool toggled)
    {
        DarkMode = toggled;
        await DarkModeChanged.InvokeAsync(DarkMode);
        await CookieService.SetUseDarkModeAsync(DarkMode);
    }
}
